import{_ as n,p as s,q as a,Z as p}from"./framework-87c4c4c1.js";const t={},o=p(`<h1 id="有效的括号" tabindex="-1"><a class="header-anchor" href="#有效的括号" aria-hidden="true">#</a> <strong>有效的括号</strong></h1><p><strong>可以使用栈来判断给定的字符串是否是有效的括号组合。</strong><br> 具体实现方式如下：<br></p><ol><li>创建一个空栈 <code>stack</code>，用于存储左括号。</li><li>遍历字符串中的每个字符，对于每个字符进行如下处理： <ul><li>如果是左括号，将其压入栈中。</li><li>如果是右括号，则判断栈顶元素是否与其匹配。如果匹配，则将栈顶元素弹出；如果不匹配，则说明字符串无效，直接返回 false。</li></ul></li><li>在遍历结束后，如果栈为空，则说明字符串有效，返回 <code>true</code>；否则说明字符串无效，返回 <code>false</code>。</li></ol><p>下面是一个<code>JavaScript</code>实现的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> c <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">&#39;[&#39;</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&#39;)&#39;</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">!==</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
          <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&#39;]&#39;</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">!==</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
          <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&#39;}&#39;</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">!==</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个实现中，我们使用了一个 <code>stack</code> 数组来模拟栈的操作。对于每个字符，如果是左括号，就将其压入栈中；如果是右括号，就弹出栈顶元素并进行匹配判断。如果匹配成功，则继续处理下一个字符；如果匹配失败，则说明字符串无效，直接返回 <code>false</code>。<br> 在遍历结束后，如果栈为空，则说明字符串有效，返回 <code>true</code>；否则说明字符串无效，返回 <code>false</code>。<br></p>`,6),e=[o];function c(l,i){return s(),a("div",null,e)}const u=n(t,[["render",c],["__file","kuohao.html.vue"]]);export{u as default};
