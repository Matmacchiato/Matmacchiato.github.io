import{_ as e,p as t,q as o,s as n,R as i,t as r,Z as a,n as p}from"./framework-87c4c4c1.js";const l="/imgs/source/91.png",c="/imgs/source/92.png",d="/imgs/source/93.png",u="/imgs/source/94.png",h={},m=a('<h1 id="包管理工具" tabindex="-1"><a class="header-anchor" href="#包管理工具" aria-hidden="true">#</a> 包管理工具</h1><h2 id="_1-npm" tabindex="-1"><a class="header-anchor" href="#_1-npm" aria-hidden="true">#</a> 1. npm</h2><p>npm全称 Node Package Manager , 翻译为中文意思是 Node的包管理工具</p><h3 id="_1-npm基本使用" tabindex="-1"><a class="header-anchor" href="#_1-npm基本使用" aria-hidden="true">#</a> (1). npm基本使用</h3><p>创建一个空目录，然后以此目录作为工具目录 启动命令行工具，执行 npm init</p><br><p><img src="'+l+`" alt="91"> npm init 命令的作用是将文件夹初始化为一个 包 ，交互式创建 package.json 文件<br> package.json 是包的配置文件，每个包都必须要有 package.json<br> package.json 内容实例：<br></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;01_npm&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><img src="`+c+'" alt="92"></p><blockquote><p>初始化的过程中还有一些注意事项： <br></p><ol><li>package name ( 包名 ) 不能使用中文、大写，默认值是 文件夹的名称 ，所以文件夹名称也不</li></ol></blockquote><p>能使用中文和大写 <br></p>',12),b={start:"2"},k=n("li",null,"version ( 版本号 )要求 x.x.x 的形式定义， x 必须是数字，默认值是 1.0.0",-1),v={href:"http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html",target:"_blank",rel:"noopener noreferrer"},g=n("strong",null,"开源证书扩展阅读",-1),_=n("li",null,"package.json 可以手动创建与修改",-1),q=n("li",null,"使用 npm init -y 或者 npm init --yes 极速创建 package.json",-1),f=a('<h2 id="_2-生产环境与开发环境" tabindex="-1"><a class="header-anchor" href="#_2-生产环境与开发环境" aria-hidden="true">#</a> 2. 生产环境与开发环境</h2><p>开发环境是程序员 专门用来写代码 的环境，一般是指程序员的电脑，开发环境的项目一般 只能程序员自己访问<br> 生产环境是项目 代码正式运行 的环境，一般是指正式的服务器电脑，生产环境的项目一般 每个客户都可以访问<br> (1). 生产依赖与开发依赖<br><img src="'+d+`" alt="93"></p><h2 id="_3-全局安装" tabindex="-1"><a class="header-anchor" href="#_3-全局安装" aria-hidden="true">#</a> 3. 全局安装</h2><p>我们可以执行安装选项 -g 进行全局安装</p><blockquote><p>npm i -g nodemon</p></blockquote><p>全局安装完成之后就可以在命令行的任何位置运行 nodemon 命令<br> 该命令的作用是 自动重启 node 应用程序</p><h3 id="_1-修改windows执行策略" tabindex="-1"><a class="header-anchor" href="#_1-修改windows执行策略" aria-hidden="true">#</a> (1). 修改windows执行策略</h3><p>windows 默认不允许 npm 全局命令执行脚本文件，所以需要修改执行策略</p><ol><li>以管理员身份打开powershell命令行</li><li>键入命令 set-ExecutionPolicy remoteSigned</li><li>键入 A 然后敲回车</li></ol><h2 id="_4-安装指定版本的包" tabindex="-1"><a class="header-anchor" href="#_4-安装指定版本的包" aria-hidden="true">#</a> 4. 安装指定版本的包</h2><p>项目中可能会遇到版本不匹配的情况，有事就需要安装指定版本的包，可以使用下面的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 格式</span>
<span class="token function">npm</span> i <span class="token operator">&lt;</span>包名@版本号<span class="token operator">&gt;</span>
<span class="token comment">## 示例</span>
<span class="token function">npm</span> i jquery@1.11.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-删除依赖" tabindex="-1"><a class="header-anchor" href="#_5-删除依赖" aria-hidden="true">#</a> 5. 删除依赖</h2><p>项目中可能需要删除某些不需要的包，可以使用下面的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 局部删除</span>
<span class="token function">npm</span> remove <span class="token function">uniq</span>
<span class="token function">npm</span> r <span class="token function">uniq</span>
<span class="token comment">## 全局删除</span>
<span class="token function">npm</span> remove <span class="token parameter variable">-g</span> nodemon
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-配置命令别名" tabindex="-1"><a class="header-anchor" href="#_6-配置命令别名" aria-hidden="true">#</a> 6. 配置命令别名</h2><p>通过配置命令别名可以更简单的执行命令 配置package.json中的scripts属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token punctuation">.</span>
    <span class="token punctuation">.</span>
    <span class="token punctuation">.</span>
    <span class="token string">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;server&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node server.js&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node index.js&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>
    <span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成之后，可以使用别名执行命令</p><blockquote><p>npm run server<br> npm run start</p></blockquote><p>用start的话 可以省略run</p><h2 id="_7-cnpm" tabindex="-1"><a class="header-anchor" href="#_7-cnpm" aria-hidden="true">#</a> 7. cnpm</h2><p>淘宝镜像</p><h3 id="_1-安装" tabindex="-1"><a class="header-anchor" href="#_1-安装" aria-hidden="true">#</a> (1). 安装</h3><blockquote><p>npm install -g cnpm --registry=https://registry.npmmirror.com</p></blockquote><h3 id="_2-npm配置淘宝镜像" tabindex="-1"><a class="header-anchor" href="#_2-npm配置淘宝镜像" aria-hidden="true">#</a> (2). npm配置淘宝镜像</h3><p>用npm也可以使用淘宝镜像，配置的方式有两种</p><ol><li>直接配置</li><li>工具配置</li></ol><h4 id="直接配置" tabindex="-1"><a class="header-anchor" href="#直接配置" aria-hidden="true">#</a> 直接配置</h4><blockquote><p>npm config set registry https://registry.npmmirror.com/</p></blockquote><h4 id="工具配置" tabindex="-1"><a class="header-anchor" href="#工具配置" aria-hidden="true">#</a> 工具配置</h4><p>使用 nrm 配置 npm 的镜像地址 npm registry manager</p><ol><li>安装nrm</li></ol><blockquote><p>npm i -g nrm</p></blockquote><ol start="2"><li>修改镜像</li></ol><blockquote><p>nrm use taobao</p></blockquote><ol start="3"><li>检查是否配置成功</li></ol><p>npm config list<br> 检查 registry 地址是否为 https://registry.npmmirror.com/ , 如果 是 则表明成功</p><h2 id="_8-yarn" tabindex="-1"><a class="header-anchor" href="#_8-yarn" aria-hidden="true">#</a> 8. yarn</h2><p>yarn 是由 Facebook 在 2016 年推出的新的 Javascript 包管理工具，官方网址：<strong>https://yarnpkg.com/</strong></p><blockquote><p>npm i -g yarn</p></blockquote><h2 id="_9-管理发布包" tabindex="-1"><a class="header-anchor" href="#_9-管理发布包" aria-hidden="true">#</a> 9. 管理发布包</h2><h3 id="_1-创建与发布" tabindex="-1"><a class="header-anchor" href="#_1-创建与发布" aria-hidden="true">#</a> (1). 创建与发布</h3><p>我们可以将自己开发的工具包发布到 npm 服务上，方便自己和其他开发者使用，操作步骤如下：</p><ol><li>创建文件夹，并创建文件 index.js， 在文件中声明函数，使用 module.exports 暴露</li><li>npm 初始化工具包，package.json 填写包的信息 (包的名字是唯一的)</li><li>注册账号 <strong>https://www.npmjs.com/signup</strong></li><li>激活账号 （ 一定要激活账号 ）</li><li>修改为官方的官方镜像 (命令行中运行 nrm use npm )</li><li>命令行下 npm login 填写相关用户信息</li><li>命令行下 npm publish 提交包</li></ol><h3 id="_2-更新包" tabindex="-1"><a class="header-anchor" href="#_2-更新包" aria-hidden="true">#</a> (2). 更新包</h3><p>后续可以对自己发布的包进行更新，操作步骤如下</p><ol><li>更新包中的代码</li><li>测试代码是否可用</li><li>修改 package.json 中的版本号</li><li>发布更新</li></ol><blockquote><p>npm publish</p></blockquote><h3 id="_3-删除包" tabindex="-1"><a class="header-anchor" href="#_3-删除包" aria-hidden="true">#</a> (3). 删除包</h3><p>执行如下命令删除包 <code>npm unpublish --force</code></p><blockquote><p>删除包需要满足一定的条件，<strong>https://docs.npmjs.com/policies/unpublish</strong><br> 你是包的作者 <br> 发布小于 24 小时 <br> 大于 24 小时后，没有其他包依赖，并且每周小于 300 下载量，并且只有一个维护者<br></p></blockquote><h2 id="_10-nvm" tabindex="-1"><a class="header-anchor" href="#_10-nvm" aria-hidden="true">#</a> 10. nvm</h2><h3 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> (1). 介绍</h3><p>nvm 全称 Node Version Manager 顾名思义它是用来管理 node 版本的工具，方便切换不同版本的 Node.js</p><h3 id="_2-下载安装" tabindex="-1"><a class="header-anchor" href="#_2-下载安装" aria-hidden="true">#</a> (2). 下载安装</h3><p>首先先下载 nvm，下载地址 https://github.com/coreybutler/nvm-windows/releases， 选择 nvm-setup.exe 下载即可（网络异常的小朋友可以在资料文件夹中获取）</p><h3 id="_3-常用命令" tabindex="-1"><a class="header-anchor" href="#_3-常用命令" aria-hidden="true">#</a> (3). 常用命令</h3><p><img src="`+u+'" alt="image.png"></p>',59);function x(y,j){const s=p("ExternalLinkIcon");return t(),o("div",null,[m,n("blockquote",null,[n("ol",b,[k,n("li",null,[i("ISC 证书与 MIT 证书功能上是相同的，关于"),n("a",v,[g,r(s)])]),_,q])]),f])}const N=e(h,[["render",x],["__file","9.html.vue"]]);export{N as default};
