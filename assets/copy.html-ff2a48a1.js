import{_ as e,p as a,q as r,Z as t}from"./framework-87c4c4c1.js";const h={},i=t('<h1 id="深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝和浅拷贝" aria-hidden="true">#</a> <strong>深拷贝和浅拷贝</strong></h1><h2 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2><h3 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h3><p>拷贝一个对象时，不仅对对象的引用进行复制，还要把对象的值也一起拷贝。<br> 这样进行深拷贝后的对象和原对象相互独立，其中一个对象改动都不会对另一个对象有任何影响。<br> 深拷贝会用到递归。<br></p><h3 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝</h3><p>值拷贝一个对象时，只拷贝对象的引用，此时其中一个对象改变都会影响到另一个对象。<br></p><p>前提为拷贝类型为引用类型的情况下：<br></p><ul><li>浅拷贝是拷贝一层，属性为对象时，浅拷贝是复制，两个对象指向同一个地址</li><li>深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址</li></ul>',8),d=[i];function n(c,s){return a(),r("div",null,d)}const l=e(h,[["render",n],["__file","copy.html.vue"]]);export{l as default};
