import{_ as n,p as a,q as s,Z as e}from"./framework-87c4c4c1.js";const t={},o=e(`<h1 id="十、迭代器iterator" tabindex="-1"><a class="header-anchor" href="#十、迭代器iterator" aria-hidden="true">#</a> 十、迭代器Iterator</h1><p>迭代器是一个接口，能快捷的访问数据。<br> 一个数据结构只要具有<code>Symbol.iterator</code>属性，就可以认为是“可遍历的”<br></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> iter <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: &#39;a&#39;, done: false }</span>
iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: &#39;b&#39;, done: false }</span>
iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: &#39;c&#39;, done: false }</span>
iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>next()</code>方法返回一个对象，这个对象包含<code>value</code>和<code>done</code>两个属性，<code>value</code>属性返回当前位置的成员，<code>done</code>属性是一个布尔值，表示遍历是否结束，即是否还有必要再一次调用<code>next</code>方法。</p><blockquote><p>原生具备 Iterator 接口的数据结构如下<br> Array<br> Map<br> Set<br> String<br> TypedArray<br> 函数的 arguments 对象<br> NodeList 对象<br></p></blockquote>`,5),c=[o];function p(i,l){return a(),s("div",null,c)}const u=n(t,[["render",p],["__file","es10.html.vue"]]);export{u as default};
