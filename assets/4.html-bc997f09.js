import{_ as n,p as s,q as a,Z as e}from"./framework-87c4c4c1.js";const t="/imgs/source/buffer1.png",p="/imgs/source/buffer2.png",o={},c=e('<h1 id="buffer-缓冲器" tabindex="-1"><a class="header-anchor" href="#buffer-缓冲器" aria-hidden="true">#</a> buffer（缓冲器）</h1><h2 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> 1. 概念</h2><ol><li>Buffer是一个类似于数组的对象，用于表示固定长度的字节序列</li><li>Buffer本质是一段内存空间，专门用来处理二进制数据</li></ol><p><img src="'+t+'" alt="buffer1"></p><h2 id="_2-特点" tabindex="-1"><a class="header-anchor" href="#_2-特点" aria-hidden="true">#</a> 2. 特点</h2><ol><li>Buffer大小固定且无法调整</li><li>Buffer性能较好，可以直接对计算机内存进行操作</li><li>每个元素的大小为1字节（byte）</li></ol><p><img src="'+p+`" alt="buffer2"></p><h2 id="_3-使用" tabindex="-1"><a class="header-anchor" href="#_3-使用" aria-hidden="true">#</a> 3. 使用</h2><h4 id="_1-创建buffer" tabindex="-1"><a class="header-anchor" href="#_1-创建buffer" aria-hidden="true">#</a> （1）创建Buffer</h4><p>node.js中创建Buffer的方式主要有如下几种：</p><ol><li>Buffer.alloc</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1. alloc</span>
<span class="token keyword">let</span> buf_1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf_1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为：&lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span>
<span class="token comment">//创建了一个长度为 10 字节的 Buffer，相当于申请了 10 字节的内存空间，每个字节的值为 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Buffer.allocUnsafe</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//2. allocUnsafe</span>
<span class="token keyword">let</span> buf_2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">allocUnsafe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf_2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为：&lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span>
<span class="token comment">//创建了一个长度为 10 字节的 Buffer，buffer 中可能存在旧的数据, 可能会影响执行结果，所以叫</span>
unsafe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Buffer.from</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//3. from</span>
<span class="token comment">// 通过字符串创建 Buffer</span>
<span class="token keyword">let</span> buf_3 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf_3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//结果为：&lt;Buffer 68 65 6c 6c 6f&gt;</span>
<span class="token comment">// 通过数组创建 Buffer</span>
<span class="token keyword">let</span> buf_4 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf_4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//结果为：&lt;Buffer 69 6c 6f 76 65 79 6f 75&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-buffer与字符串的转化" tabindex="-1"><a class="header-anchor" href="#_2-buffer与字符串的转化" aria-hidden="true">#</a> （2）Buffer与字符串的转化</h4><p>可以借助** toString **方法将Buffer转为字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> buf_4 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf_4<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//结果为：iloveyou</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>toString 默认是按照 utf-8 编码方式进行转换的。</p></blockquote><h4 id="_3-buffer的读写" tabindex="-1"><a class="header-anchor" href="#_3-buffer的读写" aria-hidden="true">#</a> （3）Buffer的读写</h4><p>Buffer可以直接通过**[ ]**的方式对数据进行处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//读取</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf_3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//修改</span>
buf_3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>
<span class="token comment">//查看字符串结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf_3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 结果为：101</span>
<span class="token comment">//				hallo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ol><li>如果修改的数值超过255，则超过8位数据会被舍弃</li><li>一个utf-8的字符一般占3个字节</li></ol></blockquote>`,24),l=[c];function u(i,r){return s(),a("div",null,l)}const d=n(o,[["render",u],["__file","4.html.vue"]]);export{d as default};
