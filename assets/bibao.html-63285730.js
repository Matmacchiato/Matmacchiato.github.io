import{_ as n,p as a,q as s,Z as e}from"./framework-87c4c4c1.js";const t={},o=e(`<h1 id="谈谈闭包和闭包的使用场景" tabindex="-1"><a class="header-anchor" href="#谈谈闭包和闭包的使用场景" aria-hidden="true">#</a> <strong>谈谈闭包和闭包的使用场景</strong></h1><h3 id="什么是闭包" tabindex="-1"><a class="header-anchor" href="#什么是闭包" aria-hidden="true">#</a> 什么是闭包<br></h3><p>闭包是指在一个函数内部定义的函数可以访问该函数作用域内的变量和参数，即使在该函数被调用结束后，这些变量和参数仍然存在与内存中</p><h3 id="触发闭包的情况" tabindex="-1"><a class="header-anchor" href="#触发闭包的情况" aria-hidden="true">#</a> 触发闭包的情况</h3><ol><li>函数当做返回值被返回</li><li>函数当做参数被传递</li><li>自执行匿名函数</li></ol><h3 id="闭包的作用" tabindex="-1"><a class="header-anchor" href="#闭包的作用" aria-hidden="true">#</a> 闭包的作用</h3><p>因为全局变量容易污染环境，而局部变量有无法长期驻留内存，于是我们需要一种机制，即能长期保存变量又不污染全局，这就是闭包。</p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h3><p>例如计数器、延迟调用、回调等闭包的应用，其核心思想还是创建私有变量和延长变量的生命周期</p><h3 id="演示代码" tabindex="-1"><a class="header-anchor" href="#演示代码" aria-hidden="true">#</a> 演示代码</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span> <span class="token comment">//私有变量</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//公开方法</span>
      <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出 &quot;John&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出 undefined，无法访问私有变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),p=[o];function c(i,l){return a(),s("div",null,p)}const r=n(t,[["render",c],["__file","bibao.html.vue"]]);export{r as default};
